# DMA Test (32 bytes to transfer)
# Minh Vu
# 04/20/2020

# Data
.dat 0x0000 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08
.dat 0x0008 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10
.dat 0x0010 0x10, 0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09
.dat 0x0018 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01

# Constants
.equ srcls 0x00 # source address (least-significant byte)
.equ srcms 0x00 # source address (most-significant byte)

.equ dstls 0x00 # dest. address (least-significant byte)
.equ dstms 0x10 # dest. address (most-significant byte)

.equ nval  0x07 # n value, numbytes = (7+1) << 2 = 32


# Set up interrupt (enable interrupt, set interrupt vector)
# Use interrupt 1
mvi 0x00, a0
mvi 0x02, r0
sie 0
mvv isr, iv1


# Setup DMA parameters for data transfer:
mvi 0x01, a0

# Load value at memory-mapped address 0x0101
mvi 0x01, r0
mvi srcls, r1
stb r1, 0

# Load value at memory-mapped address 0x0102
mvi 0x02, r0
mvi srcms, r1
stb r1, 0

# Load value at memory-mapped address 0x0103
mvi 0x03, r0
mvi dstls, r1
stb r1, 0

# Load value at memory-mapped address 0x0104
mvi 0x04, r0
mvi dstms, r1
stb r1, 0

# Load value at memory-mapped address 0x0105
mvi 0x05, r0
mvi nval, r1
stb r1, 0

# Start memory transfer by writing 0xFF to 0x0100:
mvi 0x00, r0
mvi 0xFF, r1
stb r1, 0
hlt         # Wait for interrupt

# End of program
sys 0xFF
.end


# ISR definition
.align
.lbl isr
sys 0x11    # Ack interrupt 1
rti
