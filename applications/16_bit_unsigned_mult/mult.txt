#a lower 8 bits r1
#a upper 8 bits r2

#b lower 8 bits r3
#b upper 8 bits r4

#a
#10110110 10000100
#B684

#b
#1001010011011100
#94DC

#load values into memory
.dat 0x0000 0x84, 0xB6, 0xDC, 0x94 
#.dat 0x0000 0xff, 0xff, 0xff, 0xff
.dat 0x0004 0x00, 0x00, 0x00, 0x00

#load values into registers
lpb 0, r1
lpb 0, r2
lpb 0, r3
lpb 0, r4

mvi 0, a1
mvi 0, a2
mvi 0, a3
mvi 0, a4

mvi 16, r5
mvi 0x80, r6
mvi 1, r7
mvi 0, a7

.lbl loop

.lbl ShiftResult4
sll r7, a4

.lbl ShiftResult3
and a3, r6
add a7, r6
bni AddShift3
sll r7, a3
mvi 0x80, r6

.lbl ShiftResult2
and a2, r6
add a7, r6
bni AddShift2
sll r7, a2
mvi 0x80, r6

.lbl ShiftResult1
and a1, r6
add a7, r6
bni AddShift1
sll r7, a1
mvi 0x80, r6
jmp test

.lbl AddShift3
adi 1, a4
sll r7, a3
jmp ShiftResult2

.lbl AddShift2
adi 1, a3
sll r7, a2
jmp ShiftResult1

.lbl AddShift1
adi 1, a2
sll r7, a1

.lbl test
and r2, r6
add a7, r6
bni addResult
mvi 0x80, r6
jmp aShift

.lbl addResult
add r3, a1
adc r4, a2
adc a7, a3
adc a7, a4


.lbl aShift
sll r7, r2

.lbl aShift1
and r1, r6
add a7, r6
bni AddAShift2
sll r7, r1
mvi 0x80, r6
jmp exit

.lbl AddAShift2
adi 1, r2
sll r7, r1

.lbl exit
sbi 1, r5
bzi end
jmp loop

.lbl end
spb a1, 0
spb a2, 0
spb a3, 0
spb a4, 0
sys 0xFF
.end
